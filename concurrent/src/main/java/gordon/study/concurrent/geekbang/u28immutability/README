解决并发问题，最简单的办法就是让共享变量只有读操作，而没有写操作。
设计模式：不变性（Immutability）模式。所谓不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化。换句话说，
就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。

## 快速实现具备不可变性的类
将一个类所有的属性都设置成 final 的，并且只允许存在只读方法，那么这个类基本上就具备不可变性了。
（参考 ImmutabilitySample.java）
更严格的做法是这个类本身也是 final 的，也就是不允许继承。因为子类可以覆盖父类的方法，有可能改变不可变性，所以推荐
你在实际工作中，使用这种更严格的做法。
（参考 InheritanceSpoilsImmutability.java）

## 利用享元模式避免创建重复对象
享元模式本质上其实就是一个对象池

Long 这个类并没有照搬享元模式，Long 内部维护了一个静态的对象池，仅缓存了[-128,127]之间的数字，这个对象池在 JVM
启动的时候就创建好了，而且这个对象池一直都不会变化，也就是说它是静态的。

## 使用 Immutability 模式的注意事项
- 对象的所有属性都是 final 的，并不能保证不可变性；（如果属性的类型是普通对象，那么这个普通对象的属性是可以被修改的）
- 不可变对象也需要正确发布。（引用不可变对象的对象不一定是线程安全的，对这个引用的修改在多线程中并不能保证可见性和原子性）
扩展：例如CopyOnWriteArrayList，所有的setArray方法都是在锁
