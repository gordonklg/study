可见性、原子性和有序性问题

## 可见性问题
CPU 增加了缓存，以均衡与内存的速度差异。
缓存导致了可见性问题。（单核没问题，多核才会有，因为每个核都有自己的缓存）
可见性：一个线程对共享变量的修改，另外一个线程能够立刻看到。
（参考 Test.java）

## 原子性问题
操作系统增加进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异。
线程切换带来了原子性问题。
原子性：一个或者多个操作在 CPU 执行的过程中不被中断的特性。

## 有序性问题
编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。
编译优化带来了有序性问题。











